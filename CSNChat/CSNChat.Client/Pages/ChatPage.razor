@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager
<PageTitle>CSN Chat</PageTitle>

<div class="row">
    <div class="col-lg-7">
        <div class="card">
            <div class="card-header">C500 Social Network</div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var message in Messages)
                    {
                        <li class="list-group-item mb-2">@message</li>
                    }
                </ul>
                <div class="border-primary">
                    <div class="hstack gap-2 mb-4">
                        <input type="text" class="form-control w-25" @bind="userName" placeholder="Enter your name" />
                        <textarea class="form-control" @bind="Message" placeholder="Enter your message"></textarea>
                    </div>
                    <button class="btn btn-success" @onclick="Send">Send Message</button>
                </div>
            </div>
            <div class="card-footer">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger">Chat Disconnected</div>
                }
                else
                {
                    <div class="alert alert-success">Chat Connected</div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<string> Messages = new List<string>();

    private string? userName;
    public string? Message;
    private DateTime Date => DateTime.Now;

    protected async override Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, DateTime>("ReceiveMessage", (userName, message, date) =>
        {
            var concatMessage = $"{date}{Environment.NewLine}{userName}{Environment.NewLine}{message}";
            Messages.Add(concatMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(userName) && !string.IsNullOrWhiteSpace(Message))
        {
            await hubConnection!.SendAsync("SendMessage", userName, Message, Date);
            Message = string.Empty; // Clear the message after sending
        }
    }
}
